Begun parsing source.
 [module](Module)(Define) test  

Begun parsing module
 [module](Module)(Define) test  

Begun parsing function
 [func](Func)(Define) test ( )  

Checking parameters.
 func test [(](LeftPara)(Scope) )  

ParsPassed:
 func test ( [)](RightPara)(Scope)  

Begun parsing code body
 func test ( [)](RightPara)(Scope)  

Parsed code-body.
 [end](End)(Flow)  

Begun parsing function
 [func](Func)(Define) genString ( )  

Checking parameters.
 func genString [(](LeftPara)(Scope) )  

ParsPassed:
 func genString ( [)](RightPara)(Scope)  

Begun parsing code body
 func genString ( [)](RightPara)(Scope)  

Parsing expressionj
 return [Hey!](String)(Value) ;  

Expr:Expr:1 Elements
 return Hey! [;](EndLine)(Flow)  

Parsed code-body.
 [end](End)(Flow)  

Begun parsing function
 [func](Func)(Define) test ( )  

Checking parameters.
 func test [(](LeftPara)(Scope) )  

ParsPassed:
 func test ( [)](RightPara)(Scope)  

Begun parsing code body
 func test ( [)](RightPara)(Scope)  

Parsing assignment.
 [tc](Id)(Id) = new test ( ) ;  

Parsing Assign
 [tc](Id)(Id) = new test ( ) ;  

Parsing expressionj
 tc = [new](New)(New) test ( ) ;  

New Class:test

End of assign:
 tc = new test ( [)](RightPara)(Scope) ;  

Parsing flat-statement.
 [printf](Id)(Id) ( Out: + tc . genString ( ) ) ;  

BeginFS:
 [printf](Id)(Id) ( Out: + tc . genString ( ) ) ;  

Func:printf

Parsing expressionj
 printf ( [Out:](String)(Value) + tc . genString ( ) ) ;  

VarInExpr:tc
 printf ( Out: + [tc](Id)(Id) . genString ( ) ) ;  

Expr:Expr:3 Elements
 printf ( Out: + tc . genString ( ) [)](RightPara)(Scope) ;  

Parsing expressionj
 return [5](Int)(Value) ;  

Expr:Expr:1 Elements
 return 5 [;](EndLine)(Flow)  

Parsed code-body.
EOF

