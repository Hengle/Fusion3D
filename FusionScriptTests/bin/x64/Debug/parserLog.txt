Begun parsing source.
 [module](Module)(Define) other  

Begun parsing module
 [module](Module)(Define) other  

Parsing expressionj
 var c = [3](Int)(Value) ;  

Expr:Expr:1 Elements
 var c = 3 [;](EndLine)(Flow)  

Begun parsing module
 [module](Module)(Define) draw  

Parsing expressionj
 var a = [2](Int)(Value) ;  

Expr:Expr:1 Elements
 var a = 2 [;](EndLine)(Flow)  

Parsing expressionj
 var l = [new](New)(New) other ( ) ;  

New Class:other

Begun parsing function
 [func](Func)(Define) test ( time )  

Checking parameters.
 func test [(](LeftPara)(Scope) time )  

ParsPassed:
 func test ( time [)](RightPara)(Scope)  

Begun parsing code body
 func test ( time [)](RightPara)(Scope)  

Parsing expressionj
 return [30](Int)(Value) + time ;  

VarInExpr:time
 return 30 + [time](Id)(Id) ;  

Expr:Expr:3 Elements
 return 30 + time [;](EndLine)(Flow)  

Parsed code-body.
 [end](End)(Flow)  

Begun parsing function
 [func](Func)(Define) test ( )  

Checking parameters.
 func test [(](LeftPara)(Scope) )  

ParsPassed:
 func test ( [)](RightPara)(Scope)  

Begun parsing code body
 func test ( [)](RightPara)(Scope)  

Parsing assignment.
 [ant](Id)(Id) = new draw ( ) ;  

Parsing Assign
 [ant](Id)(Id) = new draw ( ) ;  

Parsing expressionj
 ant = [new](New)(New) draw ( ) ;  

New Class:draw

End of assign:
 ant = new draw ( [)](RightPara)(Scope) ;  

Parsing flat-statement.
 [printf](Id)(Id) ( Test: + ant . test ( 20 ) ) ;  

BeginFS:
 [printf](Id)(Id) ( Test: + ant . test ( 20 ) ) ;  

Func:printf

Parsing expressionj
 printf ( [Test:](String)(Value) + ant . test ( 20 ) ) ;  

VarInExpr:ant
 printf ( Test: + [ant](Id)(Id) . test ( 20 ) ) ;  

Parsing expressionj
 printf ( Test: + ant . test ( [20](Int)(Value) ) ) ;  

Expr:Expr:1 Elements
 printf ( Test: + ant . test ( 20 [)](RightPara)(Scope) ) ;  

Expr:Expr:3 Elements
 printf ( Test: + ant . test ( 20 ) [)](RightPara)(Scope) ;  

Parsing expressionj
 return [5](Int)(Value) ;  

Expr:Expr:1 Elements
 return 5 [;](EndLine)(Flow)  

Parsed code-body.
EOF

